#version 430 core

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

struct Particle {
    vec3 pos;         // Current position
    vec3 prevPos;     // Previous position (not used here but retained for consistency)
    vec3 acc;         // Current acceleration (not used here but retained for consistency)
    float radius;     // Particle radius
};

layout(std430, binding = 0) buffer Particles {
    Particle particles[]; 
};

// Hardcoded Lorenz parameters
const float sigma = 10.0;  // Lorenz parameter
const float rho = 28.0;    // Lorenz parameter
const float beta = 8.0 / 3.0; // Lorenz parameter

uniform float dt;          // Timestep
uniform int particleCount; // Number of particles

// Function to compute the Lorenz attractor step
void updateLorenz(inout Particle p, float dt) {
    vec3 pos = p.pos;

    float dx = sigma * (pos.y - pos.x);
    float dy = pos.x * (rho - pos.z) - pos.y;
    float dz = pos.x * pos.y - beta * pos.z;

    // Update position using Euler integration
    p.pos.x += dx * dt;
    p.pos.y += dy * dt;
    p.pos.z += dz * dt;
}

void main() {
    uint i = gl_GlobalInvocationID.x;

    if (i >= particleCount) return;

    // Update particle position using the Lorenz attractor equations
    updateLorenz(particles[i], dt);
}
