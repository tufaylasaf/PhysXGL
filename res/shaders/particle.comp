#version 430 core

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

struct Particle {
    vec3 pos;
    vec3 vel;
    vec3 acc;
    vec3 newAcc;
};

struct Hash {
    float spacing;
    int maxObjs;
    int tableSize;
};

layout(std430, binding = 0) buffer Particles {
    Particle particles[];
};

layout(std430, binding = 1) buffer CellCountBuffer {
    int cellCount[];
};

layout(std430, binding = 2) buffer ParticleMapBuffer {
    int particleMap[];
};

layout(std430, binding = 3) buffer QueryIdsBuffer {
    int queryIds[];
};

uniform float dt;
uniform float g;
uniform float cr;
uniform int particleCount;
uniform int subSteps;
uniform float maxSpeed;
uniform float radius;

uniform Hash hash;

shared int sharedCellCount[1025]; // Size based on `hash.tableSize` or the workgroup size
shared int sharedParticleMap[512]; // Adjust size as needed
shared int sharedQueryIds[512];    // Adjust size based on query requirements


uint hashCoords(int xi, int yi, int zi) {
    uint h = uint(xi) * 92837111u ^ uint(yi) * 689287499u ^ uint(zi) * 283923481u;
    return h % uint(hash.tableSize);
}

int intCoord(float coord) {
    return int(floor(coord / hash.spacing));
}

uint hashPos(vec3 pos) {
    int xi = intCoord(pos.x);
    int yi = intCoord(pos.y);
    int zi = intCoord(pos.z);

    return hashCoords(xi, yi, zi);
}

void createHashTable(inout Particle p, int i) {
    if (gl_LocalInvocationID.x == 0) {
        // Initialize shared memory
        for (int j = 0; j < hash.tableSize + 1; j++) {
            sharedCellCount[j] = 0;
        }
        for (int j = 0; j < 512; j++) {
            sharedParticleMap[j] = 0;
        }
    }

    // memoryBarrierShared();
    // barrier();

    if (i < particleCount) {
        uint h = hashPos(p.pos);
        atomicAdd(sharedCellCount[h], 1);
    }

    // memoryBarrierShared();
    // barrier();

    if (gl_LocalInvocationID.x == 0) {
        int start = 0;
        for (int j = 0; j < hash.tableSize; j++) {
            start += sharedCellCount[j];
            sharedCellCount[j] = start;
        }
    }

    // memoryBarrierShared();
    // barrier();

    if (i < particleCount) {
        uint h = hashPos(p.pos);
        int cellIndex = atomicAdd(sharedCellCount[h], -1);
        sharedParticleMap[cellIndex - 1] = int(i);
    }
}

int queryParticles(inout Particle p, float maxDist) {
    int x0 = intCoord(p.pos.x - maxDist);
    int y0 = intCoord(p.pos.y - maxDist);
    int z0 = intCoord(p.pos.z - maxDist);

    int x1 = intCoord(p.pos.x + maxDist);
    int y1 = intCoord(p.pos.y + maxDist);
    int z1 = intCoord(p.pos.z + maxDist);

    int queryCount = 0;

    for (int xi = x0; xi <= x1; xi++) {
        for (int yi = y0; yi <= y1; yi++) {
            for (int zi = z0; zi <= z1; zi++) {
                uint h = hashCoords(xi, yi, zi);

                int start = sharedCellCount[h];
                int end = sharedCellCount[h + 1];

                for (int i = start; i < end; i++) {
                    sharedQueryIds[queryCount] = sharedParticleMap[i];
                    queryCount++;
                }
            }
        }
    }

    return queryCount;
}


void handleCollision(inout Particle p1, inout Particle p2) {
    vec3 axis = p1.pos - p2.pos;                    
    float dist = length(axis);                      

    if (dist < radius + radius) {              
        // Calculate collision normal
        vec3 collisionNormal = normalize(axis);  

        // Compute overlap
        float overlap = radius + radius - dist;

        // Apply positional correction
        vec3 correction = collisionNormal * (overlap / 2.0);
        p1.pos += correction;
        p2.pos -= correction;

        // Compute relative velocity
        vec3 relativeVel = p1.vel - p2.vel;

        // Calculate impulse magnitude based on velocity and collision normal
        float impulseMagnitude = dot(relativeVel, collisionNormal);

        // Restitution coefficient for bounciness
        float restitution = 0.8;  
        vec3 impulse = collisionNormal * impulseMagnitude * restitution;

        // Apply impulse to velocities
        p1.vel -= impulse * 0.5;
        p2.vel += impulse * 0.5;
    }
}

void applyForce(inout Particle p, vec3 f) {
    p.newAcc += f;
}

void updatePositions(inout Particle p, float dt) {
    p.newAcc = vec3(0);

    applyForce(p, vec3(0,-g,0));

    vec3 friction = vec3(0);
    if(length(p.vel) > 0.001){
        vec3 frictionDir = normalize(p.vel);
        vec3 frictionForce = -frictionDir * 0.2 * length(p.vel);
        applyForce(p, frictionForce);
    }

    vec3 newPos = p.pos + p.vel * dt + p.newAcc * (dt * dt * 0.5);

    vec3 newVel = p.vel + (p.acc + p.newAcc) * (dt * 0.5);

    p.pos = newPos;

    if(length(newVel) < 0.001) {p.vel = vec3(0);}
    else {p.vel = newVel;}

    p.acc = p.newAcc;
}

void applyConstraints(inout Particle p, float r) {
    float d = length(p.pos);

    if(d > r){
        vec3 n = normalize(p.pos);
        
        p.pos = n * r;
        p.vel -= dot(p.vel, n) * n;
    }
}
void main() {
    uint i = gl_GlobalInvocationID.x;

    if (gl_LocalInvocationID.x == 0) {
        // Build the hash table once per workgroup
        createHashTable(particles[i], int(i));
    }

    // barrier();

    if (i >= particleCount) return;

    vec3 containerPos = vec3(0.0); 
    float subdt = dt / subSteps;

    int queryCount = queryParticles(particles[i], 2.0 * radius);
    
    updatePositions(particles[i], dt);

    for (uint s = 0; s < subSteps; s++) {
        for (int q = 0; q < queryCount; q++) {
            int neighborIndex = queryIds[q];
            if (i != neighborIndex) {
                handleCollision(particles[i], particles[neighborIndex]);
            }
        }
    }
    
    applyConstraints(particles[i], cr);
}
